//Each time Sunny and Johnny take a trip to the Ice Cream Parlor, they pool together money dollars for ice cream. On any given day, the parlor offers a line of n flavors. Each flavor, i, is numbered sequentially with a unique ID number from 1 to n and has a cost, cost, associated with it.
//
//Given the value of money and the cost of each flavor for t trips to the Ice Cream Parlor, help Sunny and Johnny choose two distinct flavors such that they spend their entire pool of money during each visit. For each trip to the parlor, print the ID numbers for the two types of ice cream that Sunny and Johnny purchase as two space-separated integers on a new line. You must print the smaller ID first and the larger ID second.
//
//Note: Two ice creams having unique IDs i and j may have the same cost (i.e., cost i == cost j).
//
//Input Format
//
//The first line contains an integer, t, denoting the number of trips to the ice cream parlor. The 3t subsequent lines describe all of Sunny and Johnny's trips to the parlor; each trip is described as follows:
//
//The first line contains money.
//The second line contains n.
//The third line contains n space-separated integers denoting the cost of each respective flavor. The ith integer corresponds to the cost, costi, for the ice cream with ID number i (where 1<= i <= n).
//
//Constraints
// 
// * 1 <= t <= 50
// * 2 <= money <= 10^4
// * 2 <= n <= 10^4
// * 1 <= cost i <= 10^4, where i E[1,n]
// * It is guaranteed that there will always be a unique solution.
//
//Output Format
//
//Print two space-separated integers denoting the respective ID numbers for the two distinct flavors they choose to purchase, where the smaller ID is printed first and the larger ID is printed second. Recall that each ice cream flavor has a unique ID number in the inclusive range from 1 to flavors.
//
//Sample Input
//
// 2
// 4
// 5
// 1 4 5 3 2
// 4
// 4
// 2 2 4 3
//
//Sample Output
//
// 1 4
// 1 2
//
//Explanation
//
//Sunny and Johnny make the following two trips to the parlor:
//
// 1. The first time, they pool together m = 4 dollars. There are five flavors available that day and flavors 1 and 4 have a total cost of 1 + 3 = 4. Thus, we print 1 4 on a new line.
// 2. The second time, they pool together m = 4 dollars. There are four flavors available that day and flavors 1 and 2 have a total cost of 2 + 2 = 4. Thus, we print 1 2 on a new line.


// This is not a binary search tree, but it is a lot more simple and probably a better way to handle the problem given in the first place.

import Foundation

func whichIceCream(_ money: Int, _ prices: [Int]) {
    
    // Create a dictionary where the costs are our keys, their compliment the value
    var flavors = [Int : Int]()
    
    // For loop through our array of prices passed in
    for i in 0..<prices.count {
        
        // Cost is the value at that point in the array
        let cost = prices[i]
        
        // The compliment is the total money minus the cost
        let compliment = money - cost
        
        // If the compliment exists in our flavors dictionary, print its index in the prices array + 1 and the current index value + 1
        if flavors[compliment] != nil{
            print((prices.index(of: compliment)! + 1), i + 1)
            
        // If the compliment doesn't have a preexisiting key, set it as the value to the key for the cost.
        } else {
            flavors[cost] = compliment
        }
    }
}


// Process input

// t tells us how many trips to the ice cream parlor we're going to do.
let t = Int(readLine()!)!

// Loop through t times
for _ in 1...t {
    
    // Get the value for our money variable
    let money = Int(readLine()!)!
    
    // We don't need an n for this solution, but why the heck not.
    let n = Int(readLine()!)!
    
    // Reads line to create an array of the components converted into integers
    let costs = Array(readLine()!.components(separatedBy: " ").map { Int($0)! })
    
    // Pass in our money variable and our array of prices
    whichIceCream(money, costs)
}
