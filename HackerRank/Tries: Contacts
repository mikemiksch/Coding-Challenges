//We're going to make our own Contacts application! The application must perform two types of operations:
//
//1. add name, where name is a string denoting a contact name. This must store name as a new contact in the application.
//2. find partial, where partial is a string denoting a partial name to search the application for. It must count the number of contacts starting with partial and print the count on a new line.
//Given n sequential add and find operations, perform each operation in order.
//
//Input Format
//
//The first line contains a single integer, n, denoting the number of operations to perform.
//Each line i of the n subsequent lines contains an operation in one of the two forms defined above.
//
//Constraints
//* 1 <= n <= 10^5
//* 1 <= |name| <= 21
//* 1 <= |partial| <= 21
//* It is guaranteed that name and partial contain lowercase English letters only.
//* The input doesn't have any duplicate name for the add operation.
//
//
//Output Format
//
//For each find partial operation, print the number of contact names starting with partial on a new line.
//
//Sample Input
//
//4
//add hack
//add hackerrank
//find hac
//find hak
//
//Sample Output
//
//2
//0
//
//Explanation
//
//We perform the following sequence of operations:
//
//Add a contact named hack.
//Add a contact named hackerrank.
//Find and print the number of contact names beginning with hac. There are currently two contact names in the application and both of them start with hac, so we print  on a new line.
//Find and print the number of contact names beginning with hak. There are currently two contact names in the application but neither of them start with hak, so we print  on a new line.

import Foundation

var names = [String]()

func addName(name: String) {
    names.append(name)
}

// This solution only finishes some of the test cases before it times out.
// Be sure to let me know if you have a more efficient solution, as I'm not finding a lot of Swift resources for HackerRank

// So our results are equal to the count of our array of names filtered by a closure.
// The completion takes in an argument "name" and returns a boolean response
// We use a ternary operator to evaluate whether or not our name argument has a prefix of our partial string
// We return a count of the filtered array
func findPartial(partial: String) {
    let results = names.filter({ name -> Bool in
        return name.hasPrefix(partial) ? true : false }).count
    print(results)

}

if let line = readLine(), let numLines = Int(line) {
    for _ in 0..<numLines {
        let input = readLine()!.components(separatedBy: " ").map { String($0)! }
        let function = input[0]
        let inputString = input[1]
        switch function {
        case "add":
            addName(name: inputString)
        case "find":
            findPartial(partial: inputString)
        default:
            break
        }
    }
}
