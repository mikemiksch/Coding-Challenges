//Linked Lists - Shuffle Merge
//
//Write a ShuffleMerge() function that takes two lists and merges their nodes together to make one list, taking nodes alternately between the two lists. So ShuffleMerge() with 1 -> 2 -> 3 -> null and 7 -> 13 -> 1 -> null should yield 1 -> 7 -> 2 -> 13 -> 3 -> 1 -> null. If either list runs out, all the nodes should be taken from the other list. ShuffleMerge() should return the new list. The solution depends on being able to move nodes to the end of a list.
//
//var first = 3 -> 2 -> 8 -> null
//var second = 5 -> 6 -> 1 -> 9 -> 11 -> null
//shuffleMerge(first, second) === 3 -> 5 -> 2 -> 6 -> 8 -> 1 -> 9 -> 11 -> null
//If one of the argument lists is null, the returned list should be the other linked list (even if it is also null). No errors need to be thrown in ShuffleMerge().

import Foundation

class Node {
    var data: Int
    var next: Node?
    init(_ data: Int) {
        self.data = data
    }
}

func shuffleMerge(first: Node?, second: Node?) -> Node? {
    
    // We take in our first and second linked lists and set the .next of the first node to the results of the function called recursively.
    first?.next = shuffleMerge(first: second, second: first?.next)
    
    // The ternary operator is the guts of this; If first is not nil, we return first, otherwise we return second. The recursive call of the function builds out our new list by alternating between the lists as it evaluates the logic
    return first != nil ? first : second
}
