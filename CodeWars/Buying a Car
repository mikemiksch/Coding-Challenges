// Buying a car

//A man has a rather old car being worth $2000. He saw a secondhand car being worth $8000. He wants to keep his old car until he can buy the secondhand one.
//
//He thinks he can save $1000 each month but the prices of his old car and of the new one decrease of 1.5 percent per month. Furthermore the percent of loss increases by a fixed 0.5 percent at the end of every two months.
//
//Can you help him? Our man finds it difficult to make all these calculations.
//
//How many months will it take him to save up enough money to buy the car he wants, and how much money will he have left over?
//
//Parameters and return of function:
//
//parameter (positive int, guaranteed) startPriceOld (Old car price)
//parameter (positive int, guaranteed) startPriceNew (New car price)
//parameter (positive int, guaranteed) savingperMonth
//parameter (positive float or int, guaranteed) percentLossByMonth
//
//nbMonths(2000, 8000, 1000, 1.5) should return [6, 766] or (6, 766)
//where 6 is the number of months at the end of which he can buy the new car and 766 is the nearest integer to '766.158...' .
//
//Note: Selling, buying and saving are normally done at end of month. Calculations are processed at the end of each considered month but if, by chance from the start, the value of the old car is bigger than the value of the new one or equal there is no saving to be made, no need to wait so he can at the beginning of the month buy the new car:
//
//nbMonths(12000, 8000, 1000, 1.5) should return [0, 4000]
//nbMonths(8000, 8000, 1000, 1.5) should return [0, 0]
//We don't take care of a deposit of savings in a bank:-)

import Foundation

func nbMonths(_ startPriceOld: Int, _ startPriceNew: Int, _ savingPerMonth: Int, _ percentLossByMonth: Double) -> (Int, Int) {
    
    // Since we're dealing with decimals, we need to turn our car values into Doubles
    var oldCarValue = Double(startPriceOld)
    var newCarValue = Double(startPriceNew)
    
    // Divide the percentLossByMonth by 100 to get the number we'll be multiplying our car values by
    var depreciation = percentLossByMonth / 100
    
    // We start off with nothing in our savings.
    var savings = 0.0
    
    // We start off at month zero
    var month = 0
    
    // While the sum of our savings and the sale price of the old car is less than the value of the new car...
    while savings + oldCarValue < newCarValue {
        
        // ...we increment our month by one...
        month += 1
        
        // ...and add our savingsPerMonth to our savings...
        savings += Double(savingPerMonth)
        
        // ...then check to see if the rate of depreciation has increased
        if month % 2 == 0 {
            
            // If it's the end of a second month, we increase our depreciation by 0.5% expressed as a decimal.
            depreciation += 0.005
        }
        
        // Lastly, we calculate the values of the cars by multiplying their current worth against 1 - the depreciation
        oldCarValue *= (1.0 - depreciation)
        newCarValue *= (1.0 - depreciation)
    }
    
    // We return the month, and the rounded value of the price of the new car minus our savings and revenues from selling of the old car, expressed as an integer.
    return (month, Int((newCarValue - (savings + oldCarValue)).rounded()))
}

