//Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer. You don't need to validate the form of the Roman numeral.
//
//Modern Roman numerals are written by expressing each decimal digit of the number to be encoded separately, starting with the leftmost digit and skipping any 0s. So 1990 is rendered "MCMXC" (1000 = M, 900 = CM, 90 = XC) and 2008 is rendered "MMVIII" (2000 = MM, 8 = VIII). The Roman numeral for 1666, "MDCLXVI", uses each letter in descending order.
//
//Example:
//
//solution("XXI") // should return 21

import Foundation

// Create a dictionary of our possible Roman numeral values
let numerals = ["I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000]

func solution(_ string:String) -> Int {
    
    // Create a variable to store our total
    var total = Int()
    
    // Make an array of the characters passed in as our string argument.
    let characterArray = Array(string.characters)
    
    // For each index and character in our array...
    for (idx, char) in characterArray.enumerated() {
        
        // ...check to see if the current index is less than our last index value, and if the value of our numeral is less than the one immediately following.
        if idx < characterArray.count - 1 && numerals[String(char)]! < numerals[String(characterArray[idx + 1])]! {
            
            // If we're not at the last index and the following numeral is larger than our current one, we subtract the value of our current numeral from our total
            total -= numerals[String(char)]!
        
        // Otherwise, we add the value of our numeral to our total
        } else {
            total += numerals[String(char)]!
        }
    }

    // Return our final total.
    return total


