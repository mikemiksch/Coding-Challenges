//After yet another dispute on their game the Bingo Association decides to change course and automize the game.
//
//Can you help the association by writing a method to create a random Bingo card?
//
//Task:
//
//Finish method:
//getCard()
//A Bingo card contains 24 unique and random numbers according to this scheme:
//5 numbers from the B column in the range 1 to 15
//5 numbers from the I column in the range 16 to 30
//4 numbers from the N column in the range 31 to 45
//5 numbers from the G column in the range 46 to 60
//5 numbers from the O column in the range 61 to 75
//
//The card must be returned as an array of Bingo style numbers:
//[ "B14", "B12", "B5", "B6", "B3", "I28", "I27", ... ]
//The numbers must be in the order of their column: B, I, N, G, O. Within the columns the order of the numbers is random.

import Foundation

// This is a solution largely cribbed from user vibrazy at CodeWars:
// https://www.codewars.com/users/vibrazy

// CodeWars doesn't allow for arc4Random_uniform(), so it requrest a workaround.
func getCard() -> [String] {
    
    // Create a Column type that consists of a column letter, the number of squares in it, and the number range to select from.
    typealias Column = (column: String, count: Int, range: CountableClosedRange<Int>)
    
    // Create a card that
    let card: [Column] = [
        ("B", 5, 1...15),
        ("I", 5, 16...30),
        ("N", 4, 31...45),
        ("G", 5, 46...60),
        ("O", 5, 61...75),
        ]
    
    // We need to perform a few transformations on our card to convert it into an array of strings containing the desired values
    // For each Column in our array, we generate an array of random numbers, the ocunt of which is equal to our count argument, the range of which is between our range argument.
    // After that, we apply yet another flatMap to condense it all together.
    return card.flatMap({ letter -> [String] in
        let randNums = letter.range.sorted(by: { _, _ in drand48() < drand48() }).prefix(letter.count)
        return randNums.flatMap({ letter.column + String($0) })
    })
}
