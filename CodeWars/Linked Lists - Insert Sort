//Linked Lists - Insert Sort
//
//Write an InsertSort() function which rearranges nodes in a linked list so they are sorted in increasing order. You can use the SortedInsert() function that you created in the "Linked Lists - Sorted Insert" kata below. The InsertSort() function takes the head of a linked list as an argument and must return the head of the linked list.
//
//var list = 4 -> 3 -> 1 -> 2 -> null
//insertSort(list) === 1 -> 2 -> 3 -> 4 -> null
//If the passed in head node is null or a single node, return null or the single node, respectively. You can assume that the head node will always be either null, a single node, or a linked list consisting of multiple nodes.



// Much of the Node class was already defined, but we're adding a collect() method
class Node {
    var data: Int
    var next: Node?
    init(_ data: Int) {
        self.data = data
    }
    
    // Creates an array of data consiting of the values of the node + the value of the next node by calling the collect() method recursively (defaulting to an empty array if the next node is nil)
    func collect() -> [Int] {
        return [data] + (next?.collect() ?? [])
    }
}

// sortedInsert is a function already defined in the background of this challenge that inserts a node into the correct location of a pre-sorted linked list sorted in ascending order.

func insertSort(head: Node?) -> Node? {
    
    // We call our collect method on the head node, which produces an array of arrays. The data in the arrays are reduced and put in order.
    
    return head?.collect().reduce(nil, { sortedInsert($0, $1) })
}
