// Another test that's not available in Swift on Hacker Rank, but I went ahead and did a Swift version for completion's sake

//For the purposes of this challenge, we define a binary search tree to be a binary tree with the following ordering properties:
//
//The data value of every node in a node's left subtree is less than the data value of that node.
//The data value of every node in a node's right subtree is greater than the data value of that node.
//Given the root node of a binary tree, can you determine if it's also a binary search tree?
//
//Complete the function in your editor below, which has 1 parameter: a pointer to the root of a binary tree. It must return a boolean denoting whether or not the binary tree is a binary search tree. You may have to write one or more helper functions to complete this challenge.
//
//Note: We do not consider a binary tree to be a binary search tree if it contains duplicate values.
//
//Input Format
//
//You are not responsible for reading any input from stdin. Hidden code stubs will assemble a binary tree and pass its root node to your function as an argument.
//
//Constraints
//
// * 0 <= data <= 10^4

//Output Format
//
//You are not responsible for printing any output to stdout. Your function must return true if the tree is a binary search tree; otherwise, it must return false. Hidden code stubs will print this result as a Yes or No answer on a new line.
//
//Sample Input
//
//       [4]
//      /   \
//     /     \
//    /       \
//   [2]     [6]
//  /   \   /   \
// [1] [3] [5] [7]
//tree
//
//Sample Output
//
//Yes


//Explanation
//
//The tree in the diagram satisfies the ordering property for a Binary Search Tree, so we print Yes.

import Foundation

// We define our Node class as having data and optional left and right nodes
class Node {
    let data : Int
    var left : Node?
    var right : Node?
    init (data: Int) {
        self.data = data
        self.left = nil
        self.right = nil
    }
}


// We define a Binary Search Tree class as having a root node
class BST {
    var root : Node
    init (value: Int) {
        self.root = Node(data: value)
    }
    
    // An insert function that traverses the BST to find where to insert a node
    func insert(currRoot: Node, new: Node) {
        
        // If new data is less than the current, it evaluates the existence of a left hand node
        if currRoot.data > new.data {
            if currRoot.left == nil {
                currRoot.left = new
            } else {
                
                // If a value already exists, it runs the insert recursively on the next node
                insert(currRoot: currRoot.left!, new: new)
            }
            
        // Otherwise it evaluates the existence of the right hand node
        } else if currRoot.right == nil {
            currRoot.right = new
        } else {
            
            // Again, if a value already exists, it runs the insert recurively on the next node
            insert(currRoot: currRoot.right!, new: new)
        }
    }
}


// A helper function that will check our BST
func check(node: Node?, min: Int, max: Int) -> Bool {
    var result = Bool()
    
    // If we traverse the tree all the way until we reach a nil value, the tree is valid
    if node == nil {
        result = true
    }
    
    if let node = node {
        
        // If your node data is less than or more than the defined min and max, it is not a valid BST
        if node.data <= min || node.data >= max {
            result = false
        } else {
            
            // Traverses the tree by each node, evaluating if left < current < right at each point
            result = check(node: node.left, min: min, max: node.data) && check(node: node.right, min: node.data, max: max)
        }
    
    }
    return result
}


// This is the actual function we pass our node into that runs all that recursive checking stuff
func checkBST(root: Node) -> Bool {
    return check(node: root, min: Int.min, max: Int.max)
}
