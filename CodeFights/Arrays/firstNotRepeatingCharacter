//Note: Write a solution that only iterates over the string once and uses O(1) additional memory, since this is what you would be asked to do during a real interview.
//
//Given a string s, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.
//
//Example
//
//For s = "abacabad", the output should be
//firstNotRepeatingCharacter(s) = 'c'.
//
//There are 2 non-repeating characters in the string: 'c' and 'd'. Return c since it appears in the string first.
//
//For s = "abacabaabacaba", the output should be
//firstNotRepeatingCharacter(s) = '_'.
//
//There are no characters in this string that do not repeat.
//
//Input/Output
//
//[time limit] 20000ms (swift)
//[input] string s
//
//A string that contains only lowercase English letters.
//
//Guaranteed constraints:
//1 â‰¤ s.length â‰¤ 105.
//
//[output] char
//
//The first non-repeating character in s, or '_' if there are no characters that do not repeat.

func firstNotRepeatingCharacter(s: String) -> Character {
    var result = Character("_")
    var characters = Array(s.characters)
    var counts = [Character : Int]()
    for char in characters {
        counts[char] = (counts[char] ?? 0) + 1
    }
    let nonRepeatedCharacters = characters.filter({counts[$0] == 1})
    if !nonRepeatedCharacters.isEmpty {
        result = nonRepeatedCharacters.first!
    }
    return result
}
